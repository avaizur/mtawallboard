on:
  push:
    branches:
      - production

name: Production

jobs:
  deploy:
    name: Deploy to Amazon ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get branch name
        uses: nelonoel/branch-name@v1.0.1

      - name: Extract branch name
        id: github-branch
        if: github.event_name != 'pull_request'
        run: echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"

      - name: Configure environment name
        id: env-name
        env:
          REPO: ${{ github.event.repository.name }}
          BRANCH_NAME: ${{ steps.github-branch.outputs.branch }}
        run: |
          ENVIRONMENT=`echo $REPO-$BRANCH_NAME | tr "/" "-"`
          echo "Environment name: $ENVIRONMENT"
          echo "::set-output name=environment::$ENVIRONMENT"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.env-name.outputs.environment }}-${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Download task definition
        env:
          TASK_DEFNITION: ${{ steps.env-name.outputs.environment }}
        run: |
          aws ecs describe-task-definition --task-definition $TASK_DEFNITION --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ steps.env-name.outputs.environment }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ steps.env-name.outputs.environment }}
          cluster: ${{ steps.env-name.outputs.environment }}
          wait-for-service-stability: true
